<?xml version="1.0" encoding="UTF-8"?>
<includes>

<!-- Deck Background -->
<variable name="Deck_Background_ControlGroup">
	<!-- PLEX -->
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11000)">$INFO[Container(11000).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11001)">$INFO[Container(11001).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11002)">$INFO[Container(11002).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11003)">$INFO[Container(11003).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11004)">$INFO[Container(11004).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11005)">$INFO[Container(11005).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11006)">$INFO[Container(11006).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11007)">$INFO[Container(11007).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11008)">$INFO[Container(11008).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11009)">$INFO[Container(11009).ListItem.Art(fanart)]</value>
        <value condition="!Skin.HasSetting(XBMC) + Control.hasFocus(11012)">$INFO[Container(11012).ListItem.Property(fanart)]</value>
	<!-- XBMC -->
        <value condition="Skin.HasSetting(XBMC) + Control.hasFocus(11000)">$INFO[Container(11000).ListItem.Property(fanart)]</value>
        <value condition="Skin.HasSetting(XBMC) + Control.hasFocus(11000)">$INFO[Container(11001).ListItem.Property(fanart)]</value>
        <value condition="Skin.HasSetting(XBMC) + Control.hasFocus(11000)">$INFO[Container(11010).ListItem.Property(fanart)]</value>
</variable>

<!-- Mouse Support -->
	<!-- On Deck -->
	<include name="Deck_OnDeck_Fixed">
		<control type="fixedlist" id="11001">
			<onup condition="Skin.HasSetting(Home_Horizontal)">11000</onup>
			<ondown condition="Skin.HasSetting(Home_Horizontal)">300</ondown>
			<ondown condition="!Skin.HasSetting(Home_Horizontal)">11000</ondown>
			<include>Deck_Content</include>

			<!-- XBMC Items -->
			<include condition="Skin.HasSetting(XBMC)">XBMC_Deck_Recommended_Items</include>
		</control>
	</include>
	<include name="Deck_OnDeck_List">
		<control type="list" id="11001">
			<onup condition="Skin.HasSetting(Home_Horizontal)">11000</onup>
			<ondown condition="Skin.HasSetting(Home_Horizontal)">300</ondown>
			<ondown condition="!Skin.HasSetting(Home_Horizontal)">11000</ondown>
			<include>Deck_Content</include>

			<!-- XBMC Items -->
			<include condition="Skin.HasSetting(XBMC)">XBMC_Deck_Recommended_Items</include>
		</control>
	</include>

	<!-- Mouse Support (Recently Added) -->
	<include name="Deck_RecentlyAdded_Fixed">
		<control type="fixedlist" id="11000">
			<onup>11001</onup>
			<ondown condition="Skin.HasSetting(Home_Horizontal)">300</ondown>

			<include>Deck_Content</include>

			<!-- XBMC -->
			<include condition="Skin.HasSetting(XBMC)">XBMC_Deck_Recent_Items</include>
		</control>
	</include>
	<include name="Deck_RecentlyAdded_List">
		<control type="list" id="11000">
			<onup>11001</onup>
			<ondown condition="Skin.HasSetting(Home_Horizontal)">300</ondown>

			<include>Deck_Content</include>

			<!-- XBMC -->
			<include condition="Skin.HasSetting(XBMC)">XBMC_Deck_Recent_Items</include>
		</control>
	</include>

	<!-- Mouse Support (Recently Used) -->
	<include name="Deck_RecentlyUsed_Fixed">
		<control type="fixedlist" id="11002">
			<include>Deck_Content</include>
		</control>
	</include>
	<include name="Deck_RecentlyUsed_List">
		<control type="list" id="11002">
			<include>Deck_Content</include>
		</control>
	</include>

	<!-- Mouse Support (Queue) -->
	<include name="Deck_Queue_Fixed">
		<control type="fixedlist" id="11003">
			<include>Deck_Content</include>
		</control>
	</include>
	<include name="Deck_Queue_List">
		<control type="list" id="11003">
			<include>Deck_Content</include>
		</control>
	</include>

	<!-- Shared Content (Mouse) -->
	<include name="Deck_Shared_Fixed">
		<control type="fixedlist" id="11009">
			<include>Deck_Content</include>
			<content>
				<include>PLEX_Deck_SharedContent_Items</include>
			</content>
		</control>
	</include>
	<include name="Deck_Shared_List">
		<control type="list" id="11009">
			<include>Deck_Content</include>
			<content>
				<include>PLEX_Deck_SharedContent_Items</include>
			</content>
		</control>
	</include>

	<!-- PlayList (Mouse) -->
	<include name="Deck_Playlist_Fixed">
		<control type="fixedlist" id="11005">
			<include>Deck_Content</include>
		</control>
	</include>
	<include name="Deck_Playlist_List">
		<control type="list" id="11005">
			<include>Deck_Content</include>
		</control>
	</include>

	<!-- Video Queue (Mouse) -->
	<include name="Deck_PlayVideo_Fixed">
		<control type="fixedlist" id="11007">
			<include>Deck_Content</include>
		</control>
	</include>
	<include name="Deck_PlayVideo_List">
		<control type="list" id="11007">
			<include>Deck_Content</include>
		</control>
	</include>

	<!-- Music Queue (Mouse) -->
	<include name="Deck_PlayMusic_Fixed">
		<control type="fixedlist" id="11006">
			<include>Deck_Content</include>
		</control>
	</include>
	<include name="Deck_PlayMusic_List">
		<control type="list" id="11006">
			<include>Deck_Content</include>
		</control>
	</include>

	<!-- Favourites (Mouse) -->
	<include name="Deck_FavouritesPlex_Fixed">
		<control type="fixedlist" id="11012">
			<include>Deck_Content</include>
			<content>
				<include>PLEX_Deck_Favourite_Items</include>
			</content>
		</control>
	</include>
	<include name="Deck_FavouritesPlex_List">
		<control type="list" id="11012">
			<include>Deck_Content</include>
			<content>
				<include>PLEX_Deck_Favourite_Items</include>
			</content>
		</control>
	</include>


<!-- END Mouse Support -->

<include name="Deck_Animation">
	<!-- Vertical Home (Submenu) -->
	<animation effect="slide" end="730,0" time="800" tween="back" easing="inout" condition="!Skin.HasSetting(Deck_NoAnimation) + !Skin.HasSetting(Home_Horizontal) + Window.IsActive(4998)">Conditional</animation>

	<!-- Vertical Home -->
	<include>Deck_Animation_Generated</include>

	<!-- Horizontal / Compact General -->
        <animation effect="slide" end="0,288" condition="[ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
        <animation effect="slide" end="0,168" condition="[ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + Skin.HasSetting(Deck_Images_Large)">Conditional</animation>
        <animation effect="slide" end="0,216" condition="[ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + !Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_Large) + !Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>

	<!-- Horizontal Home -->
	<animation effect="slide" end="10,-140" condition="Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Home_Horizontal_Bottom) + !Skin.HasSetting(Deck_Hide)">Conditional</animation>
	<animation effect="slide" end="10,130" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom) + !Skin.HasSetting(Deck_Hide)">Conditional</animation>

	<!-- Compact Home -->
	<animation effect="slide" end="10,280" condition="Skin.HasSetting(Home_Panel) + !Skin.HasSetting(Deck_Hide)">Conditional</animation>
	<animation effect="slide" end="10,720" condition="Skin.HasSetting(Home_Panel) + Skin.HasSetting(Deck_Hide)">Conditional</animation>

</include>



<!-- Home Deck (CONTENT) -->
<include name="Deck_OnDeck_Content">
	<visible>!Skin.HasSetting(Deck_NoOnDeck) + 
		 [ !Skin.hasSetting(XBMC) + Control.isVisible(11001)] | 
		 [ Skin.HasSetting(XBMC) + Container(300).hasFocus(3) + !isEmpty(Window(Home).Property(RecommendedMovie.1.Title))   ] | 
		 [ Skin.HasSetting(XBMC) + Container(300).hasFocus(4) + !isEmpty(Window(Home).Property(RecommendedEpisode.1.Title)) ] | 
		 [ Skin.HasSetting(XBMC) + Container(300).hasFocus(5) + !isEmpty(Window(Home).Property(RecommendedAlbum.1.Title))]
	</visible>

	<!-- Vertical Home -->
	<!--<animation effect="slide" end="0,-108" time="0" condition="!Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_xLarge) + !Skin.HasSetting(Home_Horizontal) + [ !Skin.HasSetting(Deck_NoRecently) + Control.IsVisible(11000) + Control.IsVisible(11001)]">Conditional</animation>
	<animation effect="slide" end="0,-72" time="0" condition="Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Home_Horizontal) + [ !Skin.HasSetting(Deck_NoRecently) + Control.IsVisible(11000) + Control.IsVisible(11001)]">Conditional</animation>-->

	<animation effect="slide" end="0,-108" time="0" condition="!Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_xLarge) + ![ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + [ !Skin.HasSetting(Deck_NoRecently) + Control.IsVisible(11000) + Control.IsVisible(11001)]">Conditional</animation>
	<animation effect="slide" end="0,-72" time="0" condition="Skin.HasSetting(Deck_Images_Small) + ![ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + [ !Skin.HasSetting(Deck_NoRecently) + Control.IsVisible(11000) + Control.IsVisible(11001)]">Conditional</animation>

	<animation effect="fade" start="100" end="0" time="400" condition="Control.HasFocus(11000) + Skin.HasSetting(Deck_Images_xLarge)">conditional</animation>

	<!-- Horizontal Home -->
	<animation effect="fade" start="100" end="0" time="400" condition="Skin.HasSetting(Home_Horizontal) + Control.HasFocus(11000)">conditional</animation>

	<!-- Compact -->
	<animation effect="fade" start="100" end="0" time="400" condition="Skin.HasSetting(Home_Panel) + Control.HasFocus(11000)">conditional</animation>

</include>

<include name="Deck_RecentlyAdded_Content">
	<visible>!Skin.HasSetting(Deck_NoRecently) +
		 [ !Skin.hasSetting(XBMC) + Control.isVisible(11000)] | 
		 [ Skin.HasSetting(XBMC) + Container(300).hasFocus(3) + !isEmpty(Window(Home).Property(RecentMovie.1.Title))   ] | 
		 [ Skin.HasSetting(XBMC) + Container(300).hasFocus(4) + !isEmpty(Window(Home).Property(RecentEpisode.1.Title)) ] | 
		 [ Skin.HasSetting(XBMC) + Container(300).hasFocus(5) + !isEmpty(Window(Home).Property(RecentAlbum.1.Title))]
	</visible>

	<!-- Hide Recently (Large Images) -->
	<animation effect="fade" start="100" end="0" condition="Skin.HasSetting(Deck_Images_xLarge) + Control.isVisible(11000) + Control.isVisible(11001) + !Control.hasFocus(11000)">Conditonal</animation>

	<!-- Vertical Home -->
	<!--<animation effect="slide" end="0,108" time="0" condition="!Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_xLarge) + !Skin.HasSetting(Home_Horizontal) + [ !Skin.HasSetting(Deck_NoOnDeck) + Control.IsVisible(11001) + Control.IsVisible(11000)]">Conditional</animation>
	<animation effect="slide" end="0,72" time="0" condition="Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Home_Horizontal) + [ !Skin.HasSetting(Deck_NoOnDeck) + Control.IsVisible(11001) + Control.IsVisible(11000)]">Conditional</animation>-->
	<animation effect="slide" end="0,108" time="0" condition="!Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_xLarge) + ![ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + [ !Skin.HasSetting(Deck_NoOnDeck) + Control.IsVisible(11001) + Control.IsVisible(11000)]">Conditional</animation>
	<animation effect="slide" end="0,72" time="0" condition="Skin.HasSetting(Deck_Images_Small) + ![ Skin.HasSetting(Home_Horizontal) | Skin.HasSetting(Home_Panel) ] + [ !Skin.HasSetting(Deck_NoOnDeck) + Control.IsVisible(11001) + Control.IsVisible(11000)]">Conditional</animation>

	<animation effect="fade" start="100" end="0" time="400" condition="Control.HasFocus(11001) + Skin.HasSetting(Deck_Images_xLarge)">conditional</animation>

	<!-- Horizontal Home -->
	<animation effect="fade" start="100" end="0" condition="Skin.HasSetting(Home_Horizontal) + Control.isVisible(11000) + Control.IsVisible(11001) + !Skin.HasSetting(Deck_NoOnDeck) + !Control.hasFocus(11000)">Conditional</animation>

	<!-- Compact Home -->
	<animation effect="fade" start="100" end="0" condition="Skin.HasSetting(Home_Panel) + Control.isVisible(11000) + Control.IsVisible(11001) + !Skin.HasSetting(Deck_NoOnDeck) + !Control.hasFocus(11000)">Conditional</animation>

</include>

<include name="Deck_RecentlyUsed_Content">
	<visible>Control.isVisible(11002) + ![ Skin.HasSetting(Deck_NoRecently) | Skin.HasSetting(XBMC) ]</visible>
</include>

<include name="Deck_Queue_Content">
	<visible>Control.isVisible(11003) + ![ Skin.HasSetting(Deck_NoQueue) | Skin.HasSetting(XBMC) ]</visible>
</include>

<include name="Deck_Playlist_Content">
	<visible>Control.isVisible(11005) + ![ Skin.HasSetting(Deck_NoPlayQueue) | Skin.HasSetting(XBMC) ]</visible>
</include>

<include name="Deck_PlayVideo_Content">
	<visible>Control.isVisible(11007) + ![ Skin.HasSetting(Deck_NoPlayQueue) | Skin.HasSetting(XBMC) ]</visible>
</include>

<include name="Deck_PlayMusic_Content">
	<visible>Control.isVisible(11006) + ![ Skin.HasSetting(Deck_NoPlayQueue) | Skin.HasSetting(XBMC) ]</visible>
</include>

<include name="Deck_Shared_Content">
	<visible>SubString(Container(300).ListItem.Label,$LOCALIZE[44020]) + ![ Skin.HasSetting(Deck_NoShared) | Skin.HasSetting(XBMC) ]</visible>
</include>

<include name="Deck_FavouritesPlex_Content">
	<visible>!Skin.HasSetting(XBMC) + Container(300).hasFocus(18)</visible>
</include>

<!-- Home Deck -->
<include name="Home_Deck">
	<control type="group" id="5000">
		<visible>![ Skin.HasSetting(Deck_Disable) | StringCompare(Container(300).ListItem.Label,Skin.String(Deck_NoCustom1)) | StringCompare(Container(300).ListItem.Label,Skin.String(Deck_NoCustom2)) | StringCompare(Container(300).ListItem.Label,Skin.String(Deck_NoCustom3)) ]</visible>
		<include>Refresh_Workaround</include>
		<include>Deck_Animation</include>

		<!-- Deck (BOTH) -->
		<control type="group">
			<visible>ControlGroup(5000).hasFocus + Control.isVisible(11000) + Control.isVisible(11001) + ![ Skin.HasSetting(Deck_NoOnDeck) | Skin.HasSetting(Deck_NoRecently) ]</visible>

			<control type="group">
				<posx>10</posx>
				<posy>0</posy>

				<!-- Vertical Home -->
					<!-- Position -->
					<animation effect="slide" end="0,-240" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_xLarge) + !Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
					<animation effect="slide" end="0,-140" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>
					<animation effect="slide" end="0,-210" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
					<!-- Flip -->
					<animation effect="slide" end="0,580" time="600" tween="cubic" easing="inout" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_Small) + Control.HasFocus(11000)">Conditonal</animation>
					<animation effect="slide" end="0,440" time="600" tween="cubic" easing="inout" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small) + Control.HasFocus(11000)">Conditonal</animation>

				<!-- Horizontal Home -->
					<!-- Position -->
					<animation effect="slide" end="0,350" condition="Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
					<animation effect="slide" end="0,-290" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
						<!-- xLarge -->
						<animation effect="slide" end="0,170" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>

				<include>Deck_Information</include>
			</control>

			<control type="group">
				<posx>10</posx>
				<posy>0</posy>

				<!-- Vertical Home -->
					<!-- Position -->
					<animation effect="slide" end="0,330" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_xLarge) + !Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
					<animation effect="slide" end="0,440" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>
					<animation effect="slide" end="0,230" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
					<!-- Flip -->
					<animation effect="slide" end="0,-580" time="600" tween="cubic" easing="inout" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_Small) + Control.HasFocus(11000)">Conditonal</animation>
					<animation effect="slide" end="0,-440" time="600" tween="cubic" easing="inout" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small) + Control.HasFocus(11000)">Conditonal</animation>

				<!-- Horizontal Home -->
					<!-- Position -->
					<animation effect="slide" end="0,470" condition="Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
					<animation effect="slide" end="0,-170" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
						<!-- xLarge -->
						<animation effect="fade" end="0" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>
				<include>Deck_Information_More</include>
			</control>
		</control>

		<!-- Deck (SINGLE) -->
		<control type="group">
			<visible>ControlGroup(5000).hasFocus + ![ Control.isVisible(11000) + Control.isVisible(11001) + !Skin.HasSetting(Deck_NoOnDeck) + !Skin.HasSetting(Deck_NoRecently) ]</visible>

			<control type="group">
				<posx>10</posx>
				<posy>0</posy>

				<!-- Vertical Menu -->
				<animation effect="slide" end="0,230" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_xLarge) + !Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
				<animation effect="slide" end="0,440" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>
				<animation effect="slide" end="0,160" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small)">Conditional</animation>

				<!-- Horizontal Menu -->
				<animation effect="slide" end="0,350" condition="Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
				<animation effect="slide" end="0,-290" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
					<!-- xLarge -->
					<animation effect="slide" end="0,170" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>

				<include>Deck_Information</include>
			</control>

			<control type="group">
				<visible>Control.hasFocus(11000) + [ Container(11000).ListItem.Type(movie) | Container(11000).ListItem.Type(episode) ] | 
					 Control.hasFocus(11001) + [ Container(11001).ListItem.Type(movie) | Container(11001).ListItem.Type(episode) ] |
					 Control.hasFocus(11007) + [ Container(11007).ListItem.Type(movie) | Container(11007).ListItem.Type(episode) ]</visible>
				<posx>10</posx>
				<posy>0</posy>

				<!-- Vertical Menu -->
				<animation effect="slide" end="0,-140" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_xLarge) + !Skin.HasSetting(Deck_Images_Small)">Conditional</animation>
				<animation effect="slide" end="0,-440" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>
				<animation effect="slide" end="0,-160" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small)">Conditional</animation>

				<!-- Horizontal Menu -->
				<animation effect="slide" end="0,470" condition="Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
				<animation effect="slide" end="0,-170" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>
					<!-- xLarge -->
					<animation effect="fade" end="0" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom) + Skin.HasSetting(Deck_Images_xLarge)">Conditional</animation>

				<include>Deck_Information_More</include>
			</control>
		</control>

		<!-- On Deck -->
		<control type="group">
			<include>Deck_OnDeck_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>31051</label> <!-- On Deck -->
			</control>
			<include>Deck_Placeholder_11001</include>
		</control>
		<control type="group">
			<include>Deck_OnDeck_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_OnDeck_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_OnDeck_Fixed</include>
		</control>


		<!-- Recently Added -->
		<control type="group">
			<include>Deck_RecentlyAdded_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<animation effect="slide" end="0,165" condition="!Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Deck_Images_Small) + Control.IsVisible(11001) + Control.IsVisible(11000)">Conditional</animation>
				<animation effect="slide" end="0,235" condition="!Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_xLarge) + Control.IsVisible(11001) + Control.IsVisible(11000)">Conditional</animation>
				<include>Deck_Name</include>
				<label>31052</label> <!-- Recently Added -->
			</control>
			<include>Deck_Placeholder_11000</include>
		</control>
		<control type="group">
			<include>Deck_RecentlyAdded_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_RecentlyAdded_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_RecentlyAdded_Fixed</include>
		</control>

		<!-- Recently Used -->
		<control type="group">
			<include>Deck_RecentlyUsed_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>31053</label> <!-- Recently Used -->
			</control>
			<include>Deck_Placeholder_11002</include>
		</control>
		<control type="group">
			<include>Deck_RecentlyUsed_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_RecentlyUsed_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_RecentlyUsed_Fixed</include>
		</control>

		<!-- Queue -->
		<control type="group">
			<include>Deck_Queue_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>31054</label> <!-- Queue -->
			</control>
			<include>Deck_Placeholder_11003</include>
		</control>
		<control type="group">
			<include>Deck_Queue_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_Queue_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_Queue_Fixed</include>
		</control>

		<!-- PlayList (11005) -->
		<control type="group">
			<include>Deck_Playlist_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>Playlist</label> <!-- Playlist -->
			</control>
			<include>Deck_Placeholder_11005</include>
		</control>
		<control type="group">
			<include>Deck_Playlist_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_Playlist_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_Playlist_Fixed</include>
		</control>

		<!-- Queue (Video/11007) -->
		<control type="group">
			<include>Deck_PlayVideo_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>Video</label> <!-- Video -->
			</control>
			<include>Deck_Placeholder_11007</include>
		</control>
		<control type="group">
			<include>Deck_PlayVideo_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_PlayVideo_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_PlayVideo_Fixed</include>
		</control>

		<!-- Queue (Music/11006) -->
		<control type="group">
			<include>Deck_PlayMusic_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>Music</label> <!-- Music -->
			</control>
			<include>Deck_Placeholder_11006</include>
		</control>
		<control type="group">
			<include>Deck_PlayMusic_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_PlayMusic_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_PlayMusic_Fixed</include>
		</control>

		<!-- Shared Content -->
		<control type="group">
			<include>Deck_Shared_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>44020</label><!-- Shared Content -->
			</control>
			<include>Deck_Placeholder_11009</include>
		</control>
		<control type="group">
			<include>Deck_Shared_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_Shared_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_Shared_Fixed</include>
		</control>

		<!-- Favourites (PLEX) -->
		<control type="group">
			<include>Deck_FavouritesPlex_Content</include>
			<include>Animation_CommonFade_Deck</include>

			<control type="label">
				<include>Deck_Name</include>
				<label>$LOCALIZE[1036]</label><!-- Favourites -->
			</control>
			<include>Deck_Placeholder_11012</include>
		</control>
		<control type="group">
			<include>Deck_FavouritesPlex_Content</include>
			<include>Animation_CommonFade</include>

			<!-- List -->
			<include condition="system.getbool(input.enablemouse)">Deck_FavouritesPlex_List</include>
			<include condition="!system.getbool(input.enablemouse)">Deck_FavouritesPlex_Fixed</include>
		</control>

		<!-- Live TV (Next Aired) -->
		<control type="group" id="7010">
			<visible>Skin.HasSetting(XBMC) + Container(300).hasFocus(1) + !isEmpty(Window(Home).Property(NextAired.1.Label))</visible>

			<control type="group">
				<include>Deck_Placeholder_11010</include>
				<control type="label">
					<include>Deck_Name</include>
					<label>Aired Today ($INFO[Window(Home).Property(NextAired.TodayTotal)])</label><!-- Airing Today -->
				</control>
				<control type="fixedlist" id="11010">
					<include>Deck_Content</include>
					<include>XBMC_Deck_NextAired_Items</include>
				</control>
			</control>
  		</control>

		<!-- PlexXBMC -->
		<control type="group" id="7080">
			<visible>Skin.HasSetting(XBMC) + Container(300).hasFocus(8)</visible>

			<control type="group">
				<include>Deck_Placeholder_11080</include>
				<control type="label">
					<include>Deck_Name</include>
					<label>Plex</label>
				</control>
				<control type="fixedlist" id="11080">
					<include>Deck_Content</include>
					<content>
						<include>XBMC_Deck_Plexbmc_Items</include>
					</content>
				</control>
			</control>
		</control>

		<!-- PleXBMC Channels -->
		<control type="group" id="7090">
			<visible>Skin.HasSetting(XBMC) + Container(300).hasFocus(150) + !isEmpty(Window(Home).Property(Plexbmc.LatestChannel.1.Path))</visible>

			<control type="group">
				<include>Deck_Placeholder_11090</include>
				<control type="label">
					<include>Deck_Name</include>
					<label>Channels</label><!-- Channels -->
				</control>
				<control type="fixedlist" id="11090">
					<include>Deck_Content</include>
					<include>XBMC_Deck_Plexbmc_Channel_Items</include>
				</control>
			</control>
		</control>

		<!-- Favourites (XBMC) -->
		<control type="group" id="7011">
			<visible>Skin.HasSetting(XBMC) + Container(300).hasFocus(9)</visible>

			<control type="group">
				<include>Deck_Placeholder_11011</include>
				<control type="label">
					<include>Deck_Name</include>
					<label>Favourites</label><!-- Favourites -->
				</control>
				<control type="fixedlist" id="11011">
					<include>Deck_Content</include>
					<include>XBMC_Deck_Favourite_Items1</include>
				</control>
			</control>
		</control>

		<!-- XBMC CUSTOM HOME -->
		<include condition="Skin.HasSetting(XBMC)">XBMC_Home_Custom_Deck</include>

		<!-- PLEX DECK EXTENSIONS -->
		<include condition="!Skin.HasSetting(XBMC)">Home_Extension_Deck</include>

	</control>

</include>

<!-- DECK INFORMATION -->
<include name="Deck_Information">
	<control type="group">
		<control type="label">
			<height>70</height>
			<width>1000</width>
			<label>$VAR[Deck_Label_Title_1]</label>
			<include>Font_Main_Header</include>
			<scroll>false</scroll>
			<textcolor>mainblue</textcolor>
			<wrapmultiline>false</wrapmultiline>
		</control>
		<control type="label">
			<posy>60</posy>
			<height>50</height>
			<width>1000</width>
			<label>$VAR[Deck_Label_Title_2]</label>
			<include>Font_Sub_Header</include>
			<scroll>true</scroll>
			<textcolor>white</textcolor>
			<wrapmultiline>false</wrapmultiline>
			<width>1000</width>
		</control>
	</control>
</include>
<variable name="Deck_Label_Title_1">
	<!-- XBMC -->
        <value condition="Control.HasFocus(11000) + Skin.HasSetting(XBMC)">$INFO[Container(11000).ListItem.Label]</value>
        <value condition="Control.HasFocus(11001) + Skin.HasSetting(XBMC)">$INFO[Container(11001).ListItem.Label]</value>
        <value condition="Control.HasFocus(11010) + Skin.HasSetting(XBMC)">$INFO[Container(11010).ListItem.Label]</value>
        <value condition="Control.HasFocus(11011) + Skin.HasSetting(XBMC)">$INFO[Container(11011).ListItem.Label]</value>
        <value condition="Control.HasFocus(11012) + Skin.HasSetting(XBMC)">$INFO[Container(11012).ListItem.Label]</value>
        <value condition="Control.HasFocus(11090) + Skin.HasSetting(XBMC)">$INFO[Container(11090).ListItem.Label]</value>

	<!-- XBMC Custom Home -->
        <value condition="Control.HasFocus(11050) + Skin.HasSetting(XBMC)">$INFO[Container(11050).ListItem.Label]</value>
        <value condition="Control.HasFocus(11051) + Skin.HasSetting(XBMC)">$INFO[Container(11051).ListItem.Label]</value>
        <value condition="Control.HasFocus(11052) + Skin.HasSetting(XBMC)">$INFO[Container(11052).ListItem.Label]</value>
        <value condition="Control.HasFocus(11053) + Skin.HasSetting(XBMC)">$INFO[Container(11053).ListItem.Label]</value>
        <value condition="Control.HasFocus(11054) + Skin.HasSetting(XBMC)">$INFO[Container(11054).ListItem.Label]</value>
        <value condition="Control.HasFocus(11055) + Skin.HasSetting(XBMC)">$INFO[Container(11055).ListItem.Label]</value>
        <value condition="Control.HasFocus(11056) + Skin.HasSetting(XBMC)">$INFO[Container(11056).ListItem.Label]</value>
        <value condition="Control.HasFocus(11057) + Skin.HasSetting(XBMC)">$INFO[Container(11057).ListItem.Label]</value>
        <value condition="Control.HasFocus(11058) + Skin.HasSetting(XBMC)">$INFO[Container(11058).ListItem.Label]</value>
        <value condition="Control.HasFocus(11059) + Skin.HasSetting(XBMC)">$INFO[Container(11059).ListItem.Label]</value>

	<!-- Recently Added -->
	<value condition="Control.HasFocus(11000) + Container(11000).ListItem.Type(episode)">$INFO[Container(11000).ListItem.TVShowTitle]</value>
	<value condition="Control.HasFocus(11000) + Container(11000).ListItem.Type(album)">$INFO[Container(11000).ListItem.Artist]</value>
	<value condition="Control.HasFocus(11000) + ![Container(11000).ListItem.Type(episode) | Container(11000).ListItem.Type(album)]">$INFO[Container(11000).ListItem.Title]</value>

	<!-- On Deck -->
	<value condition="Control.HasFocus(11001) + Container(11001).ListItem.Type(episode)">$INFO[Container(11001).ListItem.TVShowTitle]</value>
	<value condition="Control.HasFocus(11001) + ![Container(11001).ListItem.Type(episode)]">$INFO[Container(11001).ListItem.Title]</value>

	<!-- Recently Used -->
	<value condition="Control.HasFocus(11002)">$INFO[Container(11002).ListItem.Title]</value>

	<!-- Queue -->
	<value condition="Control.HasFocus(11003)">$INFO[Container(11003).ListItem.Title]</value>

	<!-- Playlist -->
	<value condition="Control.HasFocus(11005)">$INFO[Container(11005).ListItem.Title]</value>

	<!-- Place Queue Video -->
	<value condition="Control.HasFocus(11007) + Container(11007).ListItem.Type(episode)">$INFO[Container(11007).ListItem.TVShowTitle]</value>
	<value condition="Control.HasFocus(11007) + !Container(11007).ListItem.Type(episode)">$INFO[Container(11007).ListItem.Title]</value>

	<!-- Play Queue Music -->
	<value condition="Control.HasFocus(11006)">$INFO[Container(11006).ListItem.Artist]</value>

	<!-- Favourites (PLEX) -->
	<value condition="Control.HasFocus(11012)">$INFO[Container(11012).ListItem.Label]</value>

	<!-- Home Extennsions -->
	<value condition="Control.HasFocus(8850)">$INFO[Container(8850).ListItem.Label]</value>
	<value condition="Control.HasFocus(8851)">$INFO[Container(8851).ListItem.Label]</value>
	<value condition="Control.HasFocus(8852)">$INFO[Container(8852).ListItem.Label]</value>
	<value condition="Control.HasFocus(8853)">$INFO[Container(8853).ListItem.Label]</value>
	<value condition="Control.HasFocus(8854)">$INFO[Container(8854).ListItem.Label]</value>
	<value condition="Control.HasFocus(8855)">$INFO[Container(8855).ListItem.Label]</value>
	<value condition="Control.HasFocus(8856)">$INFO[Container(8856).ListItem.Label]</value>
	<value condition="Control.HasFocus(8857)">$INFO[Container(8857).ListItem.Label]</value>
	<value condition="Control.HasFocus(8858)">$INFO[Container(8858).ListItem.Label]</value>
	<value condition="Control.HasFocus(8859)">$INFO[Container(8859).ListItem.Label]</value>
	<value condition="Control.HasFocus(8860)">$INFO[Container(8860).ListItem.Label]</value>
	<value condition="Control.HasFocus(8861)">$INFO[Container(8861).ListItem.Label]</value>
	<value condition="Control.HasFocus(8862)">$INFO[Container(8862).ListItem.Label]</value>
	<value condition="Control.HasFocus(8863)">$INFO[Container(8863).ListItem.Label]</value>
	<value condition="Control.HasFocus(8864)">$INFO[Container(8864).ListItem.Label]</value>
	<value condition="Control.HasFocus(8865)">$INFO[Container(8865).ListItem.Label]</value>

	<!-- Shared Content -->
	<value condition="Control.HasFocus(11009)">$INFO[Container(11009).ListItem.Label]</value>

</variable>
<variable name="Deck_Label_Title_2">
	<!-- XBMC -->
        <value condition="Control.HasFocus(11000) + Skin.HasSetting(XBMC)">$INFO[Container(11000).ListItem.Label2]</value>
        <value condition="Control.HasFocus(11001) + Skin.HasSetting(XBMC)">$INFO[Container(11001).ListItem.Label2]</value>
        <value condition="Control.HasFocus(11010) + Skin.HasSetting(XBMC)">$INFO[Container(11010).ListItem.Label2]</value>
        <value condition="Control.HasFocus(11011) + Skin.HasSetting(XBMC)">$INFO[Container(11011).ListItem.Label2]</value>
        <value condition="Control.HasFocus(11012) + Skin.HasSetting(XBMC)">$INFO[Container(11012).ListItem.Label2]</value>
        <value condition="Control.HasFocus(11090) + Skin.HasSetting(XBMC)">$INFO[Container(11090).ListItem.Label2]</value>

	<!-- Recently Added -->
	<value condition="Control.HasFocus(11000) + Container(11000).ListItem.Type(episode)">$INFO[Container(11000).ListItem.Title][COLOR=mainblue] / [/COLOR]$INFO[Container(11000).ListItem(0).Duration]min</value>
	<value condition="Control.HasFocus(11000) + Container(11000).ListItem.Type(movie)">$INFO[Container(11000).ListItem.Year][COLOR=mainblue] / [/COLOR]$INFO[Container(11000).ListItem(0).Duration]min</value>
	<value condition="Control.HasFocus(11000) + Container(11000).ListItem.Type(album)">$INFO[Container(11000).ListItem.Album]</value>
	<value condition="Control.HasFocus(11000) + Container(11000).ListItem.Type(photo)">$INFO[Container(11000).ListItem.Date]</value>

	<!-- On Deck -->
	<value condition="Control.HasFocus(11001) + Container(11001).ListItem.Type(episode)">$INFO[Container(11001).ListItem(0).Title][COLOR=mainblue] / [/COLOR]$INFO[Container(11001).ListItem(0).Duration]min</value>
	<value condition="Control.HasFocus(11001) + Container(11001).ListItem.Type(movie)">$INFO[Container(11001).ListItem(0).Year][COLOR=mainblue] / [/COLOR]$INFO[Container(11001).ListItem(0).Duration]min</value>

	<!-- Queue -->
	<value condition="Control.HasFocus(11003)">$INFO[Container(11003).ListItem.Property(sourceTitle)]</value>

	<!-- Playlist -->
	<value condition="Control.HasFocus(11005)">$INFO[ListItem.Property(serverName)]</value>

	<!-- PlayQueue Video -->
	<value condition="Control.HasFocus(11007) + Container(11007).ListItem.Type(episode)">$INFO[Container(11007).ListItem.Title][COLOR=mainblue] / [/COLOR]$INFO[Container(11007).ListItem(0).Duration]min</value>
	<value condition="Control.HasFocus(11007) + Container(11007).ListItem.Type(movie)">$INFO[Container(11007).ListItem.Year][COLOR=mainblue] / [/COLOR]$INFO[Container(11007).ListItem(0).Duration]min</value>

	<!-- PlayQueue Music -->
	<value condition="Control.HasFocus(11006)">$INFO[Container(11006).ListItem.Album]</value>

	<!-- Shared Content -->
	<value condition="Control.HasFocus(11009)">$INFO[Container(11009).ListItem.Label2]</value>

	<!-- Favourites (PLEX) -->
	<value condition="Control.HasFocus(11012)">$INFO[Container(11012).ListItem.Label2]</value>

</variable>

<!-- DECK INFORMATION (MORE) -->
<include name="Deck_Information_More">
	<control type="group">
		<visible>!Skin.HasSetting(deck_moreinfo)</visible>

		<!-- Content Rating -->
		<control type="image">
			<posx>0</posx>
			<posy>11</posy>
			<width>80</width>
			<height>70</height>
			<aspectratio>keep</aspectratio>
			<colordiffuse>88FFFFFF</colordiffuse>
			<texture>$VAR[Deck_Label_ContentRating]</texture>
			<align>center</align>
			<aligny>center</aligny>
		</control>

		<!-- Star Rating -->
		<control type="image">
			<posy>95</posy>
			<width>80</width>
			<height>20</height>
			<aspectratio>keep</aspectratio>
			<colordiffuse>mainblue</colordiffuse>
			<!--<colordiffuse>88FFFFFF</colordiffuse>-->
			<texture>$VAR[Deck_Label_StarRating]</texture>
			<align>center</align>
		</control>
		<!-- Plot -->
		<control type="textbox">
                        <posx>90</posx>
                        <posy>0</posy>
                        <width>700</width>
                        <height>90</height>
                        <align>justify</align>
                        <label>$VAR[Deck_Label_Plot]</label>
                        <font>Font_Bartowski_Movies_Plot</font>
                        <textcolor>ffffffff</textcolor>
                        <autoscroll time="3000" delay="5000" repeat="5000">Skin.HasSetting(autoscroll)</autoscroll>
                </control>

		<!-- Studio Logo -->
		<control type="image">
			<posy>10</posy>
			<posx>800</posx>
			<width>200</width>
			<height>110</height>
			<colordiffuse>DDFFFFFF</colordiffuse>
			<texture>$VAR[Deck_Label_Studio]</texture>
			<aspectratio>scale</aspectratio>
			<visible>Skin.HasSetting(StudioLogoImages)</visible>
		</control>

		<!-- Mediaflags -->
		<control type="grouplist">
			<posx>100</posx>
			<posy>100</posy>
			<width>600</width>
			<height>20</height>
			<orientation>horizontal</orientation>
			<itemgap>30</itemgap>
			<control type="image">
				<height>16</height>
				<width min="29" max="100">auto</width>
				<texture>$VAR[Deck_Label_VideoResolution]</texture>
				<aspectratio>keep</aspectratio>
				<colordiffuse>FFCCCCCC</colordiffuse>
			</control>
			<control type="image">
				<height>16</height>
				<width min="29" max="100">auto</width>
				<texture>$VAR[Deck_Label_AudioCodec]</texture>
				<aspectratio>keep</aspectratio>
				<colordiffuse>FFCCCCCC</colordiffuse>
			</control>
			<control type="image">
				<height>16</height>
				<width min="29" max="100">auto</width>
				<texture>$VAR[Deck_Label_AudioChannels]</texture>
				<aspectratio>keep</aspectratio>
				<colordiffuse>FFCCCCCC</colordiffuse>
			</control>
			<control type="image">
				<height>16</height>
				<width min="29" max="100">auto</width>
				<texture>$VAR[Deck_Label_AspectRatio]</texture>
				<aspectratio>keep</aspectratio>
				<colordiffuse>FFCCCCCC</colordiffuse>
			</control>
			<control type="image">
				<height>16</height>
				<width min="29" max="100">auto</width>
				<texture>$VAR[Deck_Label_VideoCodec]</texture>
				<aspectratio>keep</aspectratio>
				<colordiffuse>FFCCCCCC</colordiffuse>
			</control>
		</control>

	</control>
</include>
<variable name="Deck_Label_Plot">
	<!-- XBMC -->
        <value condition="Control.HasFocus(11000) + Skin.HasSetting(XBMC)">$INFO[Container(11000).ListItem.Property(Plot)]</value>
        <value condition="Control.HasFocus(11001) + Skin.HasSetting(XBMC)">$INFO[Container(11001).ListItem.Property(Plot)]</value>
        <value condition="Control.HasFocus(11010) + Skin.HasSetting(XBMC)">$INFO[Container(11001).ListItem.Property(Plot)]</value>

	<!-- Recently Added -->
	<value condition="Control.HasFocus(11000)">$INFO[Container(11000).ListItem.Plot]</value>

	<!-- On Deck -->
	<value condition="Control.HasFocus(11001)">$INFO[Container(11001).ListItem.Plot]</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).ListItem.Plot]</value>

</variable>
<variable name="Deck_Label_ContentRating">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000) + !isEmpty(Container(11000).ListItem.Art(mediaTag::contentRating))">$INFO[Container(11000).ListItem.Art(mediaTag::contentRating)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000) + !isEmpty(Container(11000).ListItem.Property(Mpaa))">mediaflags/content/$INFO[Container(11000).ListItem.Property(Mpaa)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001) + !isEmpty(Container(11001).ListItem.Art(mediaTag::contentRating))">$INFO[Container(11001).ListItem.Art(mediaTag::contentRating)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001) + !isEmpty(Container(11001).ListItem.Property(Mpaa))">mediaflags/content/$INFO[Container(11001).ListItem.Property(Mpaa)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007) + !isEmpty(Container(11007).ListItem.Art(mediaTag::contentRating))">$INFO[Container(11007).ListItem.Art(mediaTag::contentRating)]</value>

	<!-- Fallback -->
	<value condition="!Control.HasFocus(300)">DefaultVideoCover.png</value>
</variable>
<variable name="Deck_Label_StarRating">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">$INFO[Container(11000).ListItem.StarRating]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000)">Rating $INFO[Container(11000).Listitem.Property(StarRating)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">$INFO[Container(11001).ListItem.StarRating]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001)">Rating $INFO[Container(11001).Listitem.Property(StarRating)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).ListItem.StarRating]</value>
</variable>
<variable name="Deck_Label_Studio">
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">mediaflags/studio/$INFO[Container(11000).Listitem.Property(mediaTag-Studio)].png</value>
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">mediaflags/studio/$INFO[Container(11001).Listitem.Property(mediaTag-Studio)].png</value>
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11007)">mediaflags/studio/$INFO[Container(11007).Listitem.Property(mediaTag-Studio)].png</value>
</variable>

<!-- Mediaflags -->
<variable name="Deck_Label_VideoResolution">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">$INFO[Container(11000).Listitem.Art(mediaTag::videoResolution)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000)">mediaflags/resolution/$INFO[Container(11000).Listitem.Property(VideoResolution)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">$INFO[Container(11001).Listitem.Art(mediaTag::videoResolution)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001)">mediaflags/resolution/$INFO[Container(11001).Listitem.Property(VideoResolution)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).Listitem.Art(mediaTag::videoResolution)]</value>
</variable>
<variable name="Deck_Label_AudioCodec">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">$INFO[Container(11000).Listitem.Art(mediaTag::audioCodec)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000)">mediaflags/acodec/$INFO[Container(11000).Listitem.Property(AudioCodec)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">$INFO[Container(11001).Listitem.Art(mediaTag::audioCodec)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001)">mediaflags/acodec/$INFO[Container(11001).Listitem.Property(AudioCodec)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).Listitem.Art(mediaTag::audioCodec)]</value>
</variable>
<variable name="Deck_Label_AudioChannels">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">$INFO[Container(11000).Listitem.Art(mediaTag::audioChannels)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000)">mediaflags/channels/$INFO[Container(11000).Listitem.Property(AudioChannels)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">$INFO[Container(11001).Listitem.Art(mediaTag::audioChannels)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001)">mediaflags/channels/$INFO[Container(11001).Listitem.Property(AudioChannels)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).Listitem.Art(mediaTag::audioChannels)]</value>
</variable>
<variable name="Deck_Label_AspectRatio">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">$INFO[Container(11000).Listitem.Art(mediaTag::aspectRatio)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000)">mediaflags/ratio/$INFO[Container(11000).Listitem.Property(VideoAspect)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">$INFO[Container(11001).Listitem.Art(mediaTag::aspectRatio)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001)">mediaflags/ratio/$INFO[Container(11001).Listitem.Property(VideoAspect)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).Listitem.Art(mediaTag::aspectRatio)]</value>
</variable>
<variable name="Deck_Label_VideoCodec">
	<!-- Recently Added -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11000)">$INFO[Container(11000).Listitem.Art(mediaTag::videoCodec)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11000)">mediaflags/vcodec/$INFO[Container(11000).Listitem.Property(VideoCodec)].png</value>

	<!-- On Deck -->
	<value condition="!Skin.HasSetting(XBMC) + Control.HasFocus(11001)">$INFO[Container(11001).Listitem.Art(mediaTag::videoCodec)]</value>
	<value condition="Skin.HasSetting(XBMC) + Control.HasFocus(11001)">mediaflags/vcodec/$INFO[Container(11001).Listitem.Property(VideoCodec)].png</value>

	<!-- Play Queue (Video) -->
	<value condition="Control.HasFocus(11007)">$INFO[Container(11007).Listitem.Art(mediaTag::videoCodec)]</value>
</variable>


<!-- Deck Layout -->
<include name="Deck_Layout">

		<!-- DECK LAYOUT (XBMC) -->
		<control type="group">
			<visible>Skin.HasSetting(XBMC)</visible>

			<!-- Cover -->
			<control type="image">
				<width>110</width>
				<height>170</height>
				<aspectratio scalediffuse="false" align="center">scale</aspectratio>
				<texture diffuse="posterMaskSmall.png" background="true">$INFO[ListItem.Icon]</texture>
				<visible>StringCompare(ListItem.Property(Type),Cover)</visible>
			</control>
			<control type="image">
				<posy>145</posy>
				<width>110</width>
				<height>25</height>
				<texture border="10">base-rounded.png</texture>
				<colordiffuse>AA000000</colordiffuse>
	                        <visible>StringCompare(ListItem.Property(Type2),Cover)</visible>
			</control>
	                <control type="label">
	                        <include>Deck_Label_Nowrap</include>
	                        <label>$INFO[ListItem.Label]</label>
	                        <visible>StringCompare(ListItem.Property(Type2),Cover)</visible>
	                </control>
                
			<!-- Square -->
			<control type="image">
				<width>110</width>
				<height>110</height>
				<aspectratio scalediffuse="false" align="center">scale</aspectratio>
				<texture diffuse="posterMaskSmall.png" background="true">$INFO[ListItem.Icon]</texture>
				<visible>StringCompare(ListItem.Property(Type),Square)</visible>
			</control>
	                <control type="label">
	                        <label>$INFO[ListItem.Label]</label>
	                        <include>Deck_Label_Wrap</include>
	                        <visible>StringCompare(ListItem.Property(Type2),Square)</visible>
	                </control>

			<!-- Next Aired -->
			<control type="group">
				<visible>!isEmpty(ListItem.Property(Airtime))</visible>

				<control type="image">
					<posy>145</posy>
					<width>110</width>
					<height>25</height>
					<texture border="10">base-rounded.png</texture>
					<colordiffuse>AA000000</colordiffuse>
				</control>
				<control type="label">
					<include>Deck_Label_Nowrap</include>
					<label>$INFO[ListItem.Property(Airtime)]</label>
				</control>
			</control>

	                <!-- TV / Episode Overlay -->
	                <control type="image">
	                        <posy>145</posy>
	                        <width>110</width>
	                        <height>25</height>
	                        <texture border="10">base-rounded.png</texture>
	                        <colordiffuse>AA000000</colordiffuse>
	                        <visible>!isEmpty(ListItem.Property(Number))</visible>
        	        </control>
	                <control type="label">
	                        <include>Deck_Label_Nowrap</include>
	                        <label>$INFO[ListItem.Property(Number)]</label>
	                        <visible>!isEmpty(ListItem.Property(Number))</visible>
	                </control>


		</control>

		<!-- DECK LAYOUT (PLEX) -->
		<control type="group">
			<visible>!Skin.HasSetting(XBMC)</visible>
		
			<!-- TvShow / Season / Episode -->
			<control type="group">
				<visible>ListItem.Type(tvshow) | ListItem.Type(season) | ListItem.Type(episode)</visible>

				<!-- TV Show -->
				<control type="image">
					<width>110</width>
					<height>170</height>
					<aspectratio scalediffuse="false" align="center">scale</aspectratio>
					<texture fallback="default-poster-big.png" diffuse="posterMaskSmall.png" background="true">$INFO[ListItem.GrandparentThumb]</texture>
					<visible>!isEmpty(ListItem.GrandparentThumb)</visible>
					<include>Deck_Visible_Full</include>
				</control>

				<!-- Tv Episode -->
				<control type="image">
					<width>110</width>
					<height>170</height>
					<aspectratio scalediffuse="false" align="center">scale</aspectratio>
					<texture fallback="default-poster-big.png" diffuse="posterMaskSmall.png" background="true">$INFO[ListItem.Icon]</texture>
					<visible>isEmpty(ListItem.GrandparentThumb)</visible>
					<include>Deck_Visible_Full</include>
				</control>

				<!-- TV Default -->
				<control type="image">
					<width>110</width>
					<height>145</height>
					<include>Default_Icon</include>
					<include>Deck_Visible_Full</include>
					<visible>isEmpty(ListItem.GrandparentThumb) + isEmpty(ListItem.Icon)</visible>
				</control>
			</control>

			<!-- Other -->
			<control type="group">
				<visible>![ ListItem.Type(tvshow) | ListItem.Type(season) | ListItem.Type(episode) ]</visible>

				<!-- Shared Content (SPECIAL) -->
				<control type="image">
					<width>110</width>
					<height>170</height>
					<texture background="true" diffuse="shared_deck_mask.png">$INFO[ListItem.CompositeImage(width=110;height=170;cols=2;rows=2)]</texture>
					<aspectratio scalediffuse="false" align="center" aligny="middle">scale</aspectratio>
					<visible>Container(11009).hasFocus</visible>
				</control>

				<!-- Square -->
				<control type="image">
					<width>110</width>
					<height>110</height>
					<aspectratio scalediffuse="false" align="center">scale</aspectratio>
					<texture diffuse="posterMaskSmall.png" background="true">$INFO[ListItem.Icon]</texture>
					<include>Deck_Visible_Half</include>
				</control>
				<control type="image">
					<width>110</width>
					<height>110</height>
					<include>Default_Icon</include>
					<include>Deck_Visible_Half</include>
					<visible>isEmpty(ListItem.Icon)</visible>
				</control>

				<!-- Poster -->
				<control type="image">
					<width>110</width>
					<height>170</height>
					<aspectratio scalediffuse="false" align="center">scale</aspectratio>
					<texture diffuse="posterMaskSmall.png" background="true">$INFO[ListItem.Icon]</texture>
					<include>Deck_Visible_Full</include>
				</control>
				<control type="image">
					<width>110</width>
					<height>170</height>
					<include>Default_Icon</include>
					<include>Deck_Visible_Full</include>
					<visible>isEmpty(ListItem.Icon)</visible>
				</control>

			</control>

		<!-- Cover/Thumb Overlay -->
		<control type="image">
			<posy>145</posy>
			<width>110</width>
			<height>25</height>
			<texture border="10">base-rounded.png</texture>
			<colordiffuse>AA000000</colordiffuse>
			<include>Deck_Visible_Full</include>
			<!-- No Movie Overlay -->
			<visible>!ListItem.Type(movie)</visible>
		</control>
		<control type="image">
			<posy>110</posy>
			<width>110</width>
			<height>60</height>
			<texture border="10">base-rounded.png</texture>
			<colordiffuse>AA000000</colordiffuse>
			<include>Deck_Visible_Half</include>
		</control>

		<!-- Labels -->
		<control type="label">
			<include>Deck_Label_Nowrap</include>
			<label>S$INFO[ListItem.Season] [COLOR=mainblue]/[/COLOR] E$INFO[ListItem.Episode]</label>
			<visible>ListItem.Type(episode)</visible>
		</control>

		<control type="group">
			<visible>![ListItem.Type(episode) | ListItem.Type(movie)]</visible>
			<control type="label">
				<include>Deck_Label_Wrap</include>
				<include>Deck_Visible_Half</include>
				<label>$INFO[ListItem.Label]</label>
			</control>
			<control type="label">
				<include>Deck_Label_Nowrap</include>
				<include>Deck_Visible_Full</include>
				<label>$INFO[ListItem.Label]</label>
			</control>
		</control>
	</control>
</include>

<!-- Deck Visibility -->
<include name="Deck_Visible_Half">
	<visible>Control.isVisible(11006) | Control.isVisible(11007) | ListItem.Type(photo) | ListItem.Type(album) | ListItem.Type(song) | ListItem.Type(channel) | ListItem.Type(channels) | ListItem.Type(clip) | Skin.HasSetting(mysharedcontent_helper) | SubString(ListItem.Property(Type),Square)</visible>
</include>

<include name="Deck_Visible_Full">
	<visible>ListItem.Type(movie) | ListItem.Type(tvshow) | ListItem.Type(episode) | ListItem.Type(season) | ListItem.Type(video) | SubString(ListItem.Property(Type),Cover)</visible>
</include>

<!-- Deck Name -->
<include name="Deck_Name">
	<visible>!Skin.HasSetting(Deck_NoLabels)</visible>
	<include condition="Skin.HasSetting(Home_Horizontal) + !Skin.HasSetting(Home_Horizontal_Bottom)">Deck_Name_Horizontal</include>
	<posy>-20</posy>
	<width>200</width>
	<font>Font_Deck_Name</font>
	<textcolor>FFCCCCCC</textcolor>
	<align>right</align>

	<!-- Vertical (Animations) -->
	<include condition="!Skin.HasSetting(Home_Horizontal)">Deck_Animation_Label_Generated</include>

	<!-- Horizontal -->
	<animation effect="slide" end="10,0" condition="Skin.HasSetting(Home_Horizontal)">Conditional</animation>

	<!-- Hoeizontal Bottom -->
	<animation effect="slide" end="1240,0" condition="Skin.HasSetting(Home_Horizontal) + Skin.HasSetting(Home_Horizontal_Bottom)">Conditional</animation>

</include>

<include name="Deck_Name_Horizontal">
	<align>left</align>
</include>

<!-- Deck Content -->
<include name="Deck_Content">
	<!-- Vertical Navigation -->
	<onleft condition="!Skin.HasSetting(Home_Horizontal)">300</onleft>

	<!-- Horizontal Navigation -->
	<ondown condition="Skin.HasSetting(Home_Horizontal)">300</ondown>

	<width>1260</width>
	<height>432</height>
	<orientation>horizontal</orientation>
	<preloaditems>4</preloaditems>
	<include>Viewmode_Deck_Itemlayout</include>
</include>

<!-- Deck Refresh Workaround -->
<include name="Refresh_Workaround">
	<include condition="Skin.HasSetting(Deck_Images_Small)">Refresh_Workaround_Foobar</include>
	<include condition="Skin.HasSetting(Deck_Images_xLarge)">Refresh_Workaround_Foobar</include>
	<include condition="!Skin.HasSetting(Deck_Images_Small) + !Skin.HasSetting(Deck_Images_xLarge)">Refresh_Workaround_Foobar</include>
</include>

<include name="Refresh_Workaround_Foobar">
	<description>Workaround</description>
</include>

</includes>

